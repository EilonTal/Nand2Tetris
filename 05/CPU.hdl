// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Ainstructionsan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing uAinstructiont), consisting of an ALU,
 * two registers named Avalue and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and Avalue in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by Avalue, inputToA.e. to Memory[Avalue]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (inputToA.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[Avalue])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // choosing instruction or output from previous ALU computation
    Not(in=instruction[15],out=Ainstruction);
	Mux16(a=outMCopy,b=instruction,sel=Ainstruction,out=inputToA); 
    
    // load something new to a in one of two cases -
    // 1. its an A command, so naturally it receives a new value, the 15 other bits
    // 2. if A is the destination of a computation 
	Or(a=Ainstruction,b=instruction[5],out=shouldLoadA); 
	ARegister(in=inputToA,load=shouldLoadA,out=Avalue,out[0..14]=addressM);

	And(a=instruction[15],b=instruction[12],out=AorM);
	Mux16(a=Avalue,b=inM,sel=AorM,out=AM);
	
	ALU(x=D,y=AM,zx=instruction[11],nx=instruction[10],zy=instruction[9],
    ny=instruction[8],f=instruction[7],no=instruction[6],out=outMCopy,out=outM,zr=zr,ng=ng);

	And(a=instruction[15],b=instruction[4],out=intoD);
	DRegister(in=outMCopy,load=intoD,out=D);

	And(a=instruction[15],b=instruction[3],out=writeM);

	// PC - should jump or not, and to where
	Not(in=ng,out=pos);
	Not(in=zr,out=nzr);
	And(a=instruction[15],b=instruction[0],out=jgt);
	And(a=pos,b=nzr,out=posAndNzr);
	And(a=jgt,b=posAndNzr,out=positiveJump);

	And(a=instruction[15],b=instruction[1],out=jeq);
	And(a=jeq,b=zr,out=zeroJump);

	And(a=instruction[15],b=instruction[2],out=jlt);
	And(a=jlt,b=ng,out=negativeJump);

	Or(a=positiveJump,b=zeroJump,out=positiveOrZeroJump);
	Or(a=negativeJump,b=positiveOrZeroJump,out=Jump);
	Not(in=Jump, out=notJump);
	PC(in=Avalue,load=Jump,inc=notJump,reset=reset,out[0..14]=pc);
}